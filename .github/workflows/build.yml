name: Build and Release

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            artifact_name: linux
            bin_ext: ""
          - os: macos-latest
            artifact_name: macos
            bin_ext: ""
          - os: windows-latest
            artifact_name: windows
            bin_ext: ".exe"

    steps:
    - name: Checkout code + tags
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
        
        # Windows 需要额外安装 zip 工具
        if [ "${{ runner.os }}" == "Windows" ]; then
          choco install zip -y
        fi

    - name: Build executable
      run: |
        # 获取版本号
        $VERSION = (git describe --tags --abbrev=0)
        if ("${{ runner.os }}" -eq "Windows") {
          $VERSION = $VERSION -replace "v", ""
        }
        
        # 设置输出名称
        $OUTPUT_NAME = "myapp-$VERSION-${{ matrix.artifact_name }}${{ matrix.bin_ext }}"
        
        # 执行 PyInstaller
        pyinstaller --onefile --name myapp main.py
        
        # 重命名输出文件
        Move-Item -Path "dist/myapp${{ matrix.bin_ext }}" -Destination "dist/$OUTPUT_NAME"

    - name: Create distribution package
      run: |
        # 创建临时目录
        mkdir dist_package
        
        # 获取版本号（再次使用）
        $VERSION = (git describe --tags --abbrev=0)
        if ("${{ runner.os }}" -eq "Windows") {
          $VERSION = $VERSION -replace "v", ""
        }
        
        # 复制可执行文件
        $EXE_NAME = "myapp-$VERSION-${{ matrix.artifact_name }}${{ matrix.bin_ext }}"
        Copy-Item -Path "dist/$EXE_NAME" -Destination "dist_package/"
        
        # 复制额外文件夹（根据你的项目修改）
        Copy-Item -Path "config" -Destination "dist_package/" -Recurse
        Copy-Item -Path "data" -Destination "dist_package/" -Recurse
        Copy-Item -Path "templates" -Destination "dist_package/" -Recurse
        Copy-Item -Path "README.md" -Destination "dist_package/"
        Copy-Item -Path "LICENSE" -Destination "dist_package/"
        
        # 创建 ZIP 文件
        $ZIP_NAME = "myapp-$VERSION-${{ matrix.artifact_name }}.zip"
        
        # 压缩命令（跨平台）
        if ("${{ runner.os }}" -eq "Windows") {
          Compress-Archive -Path "dist_package/*" -DestinationPath "dist_zip/$ZIP_NAME"
        } else {
          cd dist_package
          zip -r "../dist_zip/$ZIP_NAME" .
          cd ..
        }
        
        # 清理临时文件
        Remove-Item -Path "dist_package" -Recurse -Force

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: package-${{ matrix.artifact_name }}
        path: dist_zip/

  release:
    name: Create Release Assets
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir release
        # 收集所有 ZIP 文件
        find artifacts -name '*.zip' -exec cp {} release \;
        
        # 可选：添加校验和文件
        cd release
        sha256sum *.zip > SHA256SUMS.txt

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release/*.zip
          release/SHA256SUMS.txt
        tag_name: ${{ github.ref }}
        name: Release ${{ github.ref_name }}
        body: "Pre-built packages for ${{ github.ref_name }}"